Spring 웹 애플리케이션의 root-context와 servlet-context는 서로 다른 구성 파일로, 각각의 역할과 로딩 과정이 있습니다.
아래에서는 두 구성 파일의 로딩 과정을 설명합니다.

root-context 로딩 과정:
root-context 는 주로 비즈니스 로직, 데이터베이스 연결, 서비스 빈 등과 같은 애플리케이션의 핵심적인 구성을 담당합니다.
일반적으로 root-context는 applicationContext.xml이나 ApplicationConfig.java와 같은 이름으로 생성됩니다.
web.xml에 ContextLoaderListener를 등록하여 root-context를 로딩합니다.
 이를 통해 서버가 시작될 때 root-context가 초기화되고 관리되는 ApplicationContext 인스턴스가 생성됩니다.
root-context는 애플리케이션 전반에 걸쳐 공유되는 빈들을 설정하고 관리합니다. 이는 서블릿 컨텍스트(servlet-context)에서도 참조할 수 있습니다.

servlet-context 로딩 과정:
servlet-context는 주로 웹 계층에 필요한 구성 요소들을 담당합니다. 예를 들면 컨트롤러, 뷰 리졸버, 핸들러 매핑 등이 있습니다.
일반적으로 servlet-context는 dispatcher-servlet.xml이나 WebConfig.java와 같은 이름으로 생성됩니다.

web.xml에 DispatcherServlet을 등록하여 servlet-context를 로딩합니다. 이를 통해 클라이언트 요청이 들어올 때마다 해당 서블릿이 초기화되고 관리되는
WebApplicationContext 인스턴스가 생성됩니다.

servlet-context는 웹 계층에서 사용되는 빈들을 설정하고 관리합니다. 이때 root-context에서 설정된 빈들을 참조할 수 있습니다.
일반적으로 root-context는 애플리케이션 전체에서 공유되는 비즈니스 로직이나 데이터베이스 연결과 같은 핵심적인 구성을 담당하고,
servlet-context는 웹 계층에서 필요한 구성을 담당합니다. 이러한 분리는 모듈성과 재사용성을 높이